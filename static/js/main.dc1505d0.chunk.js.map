{"version":3,"sources":["components/EnhancedTable.tsx","services/api.ts","components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","classes","onRequestSort","TableHead","TableRow","headCell","TableCell","align","padding","sortDirection","TableSortLabel","active","direction","onClick","property","event","className","visuallyHidden","useStyles","makeStyles","theme","createStyles","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","EnhancedTable","hosts","onSelectHost","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","min","length","Paper","TableContainer","Table","aria-labelledby","size","aria-label","rowCount","TableBody","slice","row","labelId","hover","host","remote_host","tabIndex","style","cursor","component","scope","count","last_seen","colSpan","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value","getBadHosts","get","data","getGeo","ip","endpoint","url","process","headers","Headers","fetch","method","redirect","response","status","json","Error","Map","loading","setLoading","error","setError","details","setDetails","useEffect","then","geo","catch","err","backgroundColor","MapContainer","center","latitude","longitude","scrollWheelZoom","zoom","TileLayer","attribution","Marker","Tooltip","permanent","offset","city","country_name","palette","background","boxShadow","shadows","App","selectedHost","setSelectedHost","setHosts","modalOpen","setModalOpen","left","transform","modalStyle","sortedData","Container","maxWidth","textAlign","Typography","variant","IconButton","color","Modal","open","onClose","aria-describedby","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc1505d0.chunk.js","sourcesContent":["import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { BadHost } from \"../services/api\";\n\ntype Data = BadHost;\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = \"asc\" | \"desc\";\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string }\n) => number {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface HeadCell {\n  disablePadding: boolean;\n  id: keyof Data;\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n  {\n    id: \"remote_host\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Remote Host (IP Address)\",\n  },\n  { id: \"count\", numeric: true, disablePadding: false, label: \"Count\" },\n  {\n    id: \"last_seen\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Last Seen\",\n  },\n];\n\ninterface EnhancedTableProps {\n  classes: ReturnType<typeof useStyles>;\n  onRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof Data\n  ) => void;\n  order: Order;\n  orderBy: string;\n  rowCount: number;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property: keyof Data) => (\n    event: React.MouseEvent<unknown>\n  ) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n    },\n    paper: {\n      width: \"100%\",\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 550,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: \"rect(0 0 0 0)\",\n      height: 1,\n      margin: -1,\n      overflow: \"hidden\",\n      padding: 0,\n      position: \"absolute\",\n      top: 20,\n      width: 1,\n    },\n  })\n);\n\ninterface Props {\n  hosts: BadHost[];\n  onSelectHost: (host: string) => void;\n}\n\nexport default function EnhancedTable({ hosts, onSelectHost }: Props) {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState<Order>(\"desc\");\n  const [orderBy, setOrderBy] = React.useState<keyof Data>(\"count\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof Data\n  ) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, host: string) => {\n    onSelectHost(host);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, hosts.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"Bad Hosts Table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={hosts.length}\n            />\n            <TableBody>\n              {stableSort(hosts, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const labelId = `enhanced-table-row-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.remote_host)}\n                      tabIndex={-1}\n                      key={row.remote_host}\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <TableCell component=\"th\" id={labelId} scope=\"row\">\n                        {row.remote_host}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.count}</TableCell>\n                      <TableCell align=\"right\">{row.last_seen}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={hosts.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","export interface BadHost {\n  count: number;\n  last_seen: string;\n  remote_host: string;\n}\n\nexport const getBadHosts = async (): Promise<BadHost[]> => {\n  const data = await get(\"/bad-hosts\") as BadHost[];\n  return data.map((host) => ({\n    ...host,\n    count: parseInt(`${host.count}`, 10)\n  }));\n};\n\nexport interface Geolocation {\n  city: string;\n  country_iso: string;\n  country_name: string;\n  latitude: number;\n  longitude: number;\n  postal_code: string;\n  region_iso: string;\n  region_name: string;\n}\n\nexport const getGeo = async (ip: string): Promise<Geolocation> => {\n  return get(`/netinfo/geolocation/${ip}`) as Promise<Geolocation>;\n};\n\nexport type ApiResponse = BadHost[] | Geolocation;\n\nconst get = async (endpoint: string): Promise<ApiResponse> => {\n  const url = `${process.env.REACT_APP_API_URL}${endpoint}`;\n  const headers = new Headers({\n    \"Authorization\": `Bearer ${process.env.REACT_APP_API_SECRET}`,\n    \"Content-Type\": \"application/json\",\n  })\n  const response = await fetch(url, {\n    headers,\n    method: \"GET\",\n    redirect: 'follow'\n  });\n\n  if (response.status === 200) {\n    let json = await response.json();\n    return json.data;\n  } else {\n    throw new Error(\"Problem with API request\");\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { MapContainer, Marker, TileLayer, Tooltip } from \"react-leaflet\";\nimport { getGeo, Geolocation } from \"../services/api\";\n\ninterface Props {\n  host: string;\n}\n\nconst Map = (props: Props) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [details, setDetails] = useState<Geolocation>();\n\n  useEffect(() => {\n    setLoading(true);\n    getGeo(props.host)\n      .then((geo) => {\n        setDetails(geo);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(true);\n      });\n  }, [props.host]);\n\n  const styles = {\n    width: \"100%\",\n    height: \"400px\",\n    backgroundColor: \"gray\",\n  };\n\n  return (\n    <div style={styles}>\n      {error && <div>Error Loading Geolocation</div>}\n      {loading && <div>Loading Geolocation</div>}\n      {!error && !loading && details && (\n        <MapContainer\n          center={[details.latitude, details.longitude]}\n          scrollWheelZoom={false}\n          style={{ width: \"100%\", height: \"100%\" }}\n          zoom={5}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker position={[details.latitude, details.longitude]}>\n            <Tooltip permanent direction=\"top\" offset={[-15, -15]}>\n              {props.host}\n              <br />\n              {details.city\n                ? `${details.city}, ${details.country_name}`\n                : details.country_name}\n            </Tooltip>\n          </Marker>\n        </MapContainer>\n      )}\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport Info from \"@material-ui/icons/Info\";\nimport Container from \"@material-ui/core/Container\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Typography from \"@material-ui/core/Typography\";\nimport BadHostTable from \"./components/EnhancedTable\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Map from \"./components/Map\";\nimport { BadHost, getBadHosts } from \"./services/api\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: \"absolute\",\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid #000\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\nconst App = () => {\n  const [selectedHost, setSelectedHost] = useState(\"\");\n  const [hosts, setHosts] = useState<BadHost[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const classes = useStyles();\n  const [modalStyle] = useState({\n    top: `50%`,\n    left: `50%`,\n    transform: `translate(-50%, -50%)`,\n  });\n\n  useEffect(() => {\n    getBadHosts()\n      .then((data) => {\n        const sortedData = data.sort((a, b) => b.count - a.count);\n        setHosts(sortedData);\n        setLoading(false);\n        setSelectedHost(sortedData[0]?.remote_host);\n      })\n      .catch(() => {\n        setError(true);\n      });\n  }, []);\n\n  if (error) {\n    return <div>Error Loading Bad Hosts</div>;\n  }\n\n  if (loading) {\n    return <div>Loading Bad Hosts</div>;\n  }\n\n  const handleSelectHost = (host: string) => setSelectedHost(host);\n  const handleOpenModal = () => setModalOpen(true);\n  const handleCloseModal = () => setModalOpen(false);\n\n  return (\n    <Container maxWidth={\"md\"}>\n      <div style={{ textAlign: \"center\", margin: \"30px 0 15px 0\" }}>\n        <Typography variant=\"h2\" component=\"h1\">\n          HoneyDB Viewer\n        </Typography>\n        <Typography variant=\"subtitle1\">\n          A tracker of for bad host behavior\n          <IconButton\n            color=\"primary\"\n            aria-label=\"more info\"\n            component=\"span\"\n            onClick={handleOpenModal}\n          >\n            <Info />\n          </IconButton>\n        </Typography>\n        <Modal\n          open={modalOpen}\n          onClose={handleCloseModal}\n          aria-labelledby=\"bad-host-info\"\n          aria-describedby=\"Bad Host Description\"\n        >\n          <div style={modalStyle} className={classes.paper}>\n            A bad host is a host on the Internet that has connected or attempted\n            to connect to one of the honeypots that feed data to HoneyDB. In\n            general, there is no legitimate reason for any host to connect to\n            these honeypots. So those that do can be considered bad, and a\n            potential threat. If you see connectivity from any of these hosts on\n            your network it may be malicious and may require some investigation.\n          </div>\n        </Modal>\n      </div>\n\n      {selectedHost && <Map host={selectedHost} />}\n      <BadHostTable hosts={hosts} onSelectHost={handleSelectHost} />\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}